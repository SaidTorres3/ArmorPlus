buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        maven { url = 'https://plugins.gradle.org/m2/' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '4.1.+', changing: true
        classpath "com.wynprice.cursemaven:CurseMaven:2.1.5"
        classpath "gradle.plugin.com.matthewprenger:CurseGradle:1.4.0"
    }
}

apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: "com.wynprice.cursemaven"
apply plugin: "com.matthewprenger.cursegradle"

repositories {
    maven { url 'https://repo.repsy.io/mvn/gandiber/geckolib' }
    maven { url 'https://maven.blamejared.com' }

}

version = mc_version + '-' + version_major + '.' + version_minor + '.' + version_patch
group = package_group
archivesBaseName = mod_id

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    //mappings channel: 'snapshot', version: '20201028-1.16.3'
    mappings channel: 'official', version: '1.16.5'

    accessTransformer = file('src/main/resources/META-INF/armorplus_at.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            mods {
                armorplus {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be changed as needed.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            // property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                armorplus {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'armorplus', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                armorplus {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

dependencies {
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"
    implementation fg.deobf("curse.maven:thedragonlib:3108730") //TheDragonLib
//    implementation fg.deobf('software.bernie.geckolib:forge-1.16.5-geckolib:3.0.13') //Geckolib
    implementation fg.deobf("curse.maven:geckolib:3502622") //Geckolib (3.0.49)
    compileOnly fg.deobf("vazkii.patchouli:Patchouli:1.16.4-50:api") //Patchouli
    runtimeOnly fg.deobf("vazkii.patchouli:Patchouli:1.16.4-50") //Patchouli
    implementation fg.deobf("curse.maven:mekanism:3183270") //Mekanism
    implementation fg.deobf("curse.maven:jei:3502687") //JEI 7.7.1.129

//    implementation fg.deobf("curse.maven:ichunutil:3062089")
//    implementation fg.deobf("curse.maven:tabula-minecraft-modeler:3062126")
//    implementation fg.deobf("curse.maven:corail-tombstone:3169275")
//    implementation fg.deobf("curse.maven:reliquary-v1-3:3119035")
//    implementation fg.deobf("curse.maven:better-diving:3214276")
//    implementation fg.deobf('curse.maven:minecolonies:3126211')
//    implementation fg.deobf("curse.maven:structurize:3119907") //Minecolonie Dep
    //implementation fg.deobf("curse.maven:blame:3181314")

}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
                "Specification-Title"     : "${mod_name}",
                "Specification-Vendor"    : "${author}",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : "${version}",
                "Implementation-Vendor"   : "${author}",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}


def curseRelations = {
    //requiredDependency '' //add curseforge-slug here
    requiredDependency 'thedragonlib'
    requiredDependency 'geckolib'
    optionalDependency 'patchouli'
}

curseforge {
    apiKey = project.hasProperty('api_token') ? project.api_token : '0'
    project {
        id = '237366'
        changelog = file('src/main/resources/changelog.md')
        changelogType = 'markdown'
        releaseType = 'release'
        addGameVersion '1.16.5'
        relations curseRelations
    }
}